





随着云计算的不断发展，为了实现更高效的数据流通和数据计算，集中化的数据管理方式被广泛采用，同时产生了众多因数据管理不当而导致的隐私泄露问题。在没有行之有效的隐私保护技术方案出现之前，各国纷纷颁布了数据隐私保护条例，通过法律来约束对数据的使用。可信计算的诞生，是为了通过各种密码学技术，在保护数据隐私的前提下，使得数据得以大规模应用。本文研究了可信计算行业的发展和现状，综述了领域内世界领先的科研成果，列举并对比了可信计算行业中的代表项目，通过实验和论文数据对该行业进行总结和展望。作为信息安全的重要领域，可信计算包括可信硬件、可信软件、可信网络等多方面。在安全性和隐私保护领域，同态加密、安全多方计算、零知识证明、公钥加密算法等密码学技术给出了一些优秀的方案，但在计算和通信复杂度方面，则面临着很大的局限。在计算性能方面，可信硬件综合了前述几种方案的优势，具备更高的计算性能。


保护隐私数据的手段主要分为可信硬件和密码学两个流派。可信硬件方面主要是可信执行环境（TrustedExecutionEnvironment，简称TEE），而密码学方面有同态加密（HomomorphicEncryption，简称HE)，安全多方计算（SecurityMulti-PartyComputation，简称SMC)，公钥加密算法和零知识证明等技术。
同态加密是指对其加密数据进行处理得到一个输出，将此输出进行解密，其结果与用对应方法处理未加密原始数据得到的结果一致。也就是说，其他人可以对加密数据进行处理，但是处理过程不会泄露任何原始内容。同时，拥有密钥的用户对处理过的数据进行解密后，得到的正好是处理后的结果。 该特性对于保护信息的安全非常重要：利用该技术可以先对多个密文进行计算之后再解密，不必对每一个密文解密而花费高昂的计算成本；利用同态加密可以实现无密钥方对密文的计算，密文计算无须经过密钥方，既可以减少通信代价，又可以转移计算任务，由此可平衡各方的计算成本。


同态加密最早由Rivest等人在1978年提出[1]，过去的三十多年时间里，学者们不断地提出各种加密方案，但它们大多是半同态的，即只具备一种运算的同态性。如果满足f(A)+f(B)=f(A+B)，这种加密函数叫做加法同态；如果一个加密函数f只满足加法同态，就只能进行加减法运算； 如果满足f(A)×f(B)=f(A×B)，这种加密函数叫做乘法同态。如果加密函数f只满足乘法同态，就只能进行乘除法运算。例如，著名的RSA算法[2]仅满足乘法同态，但不具备加法同态；Paillier算法[3]仅满足加法同态。这些方案运算种类有限，因此实用性不足。个别方案由于存在安全问题而未能得到广泛认可。学者们不断进行着全同态加密(FHE)方案的研究，2009年，IBM研究院CraigGentry提出了第一个全同态加密方案[4]，标志着该领域研究取得了突破性进展，但这种方法计算复杂度过高。此后，众多密码学家在此基础上进行了大量实用化研究，涌现出不同方法的全同态方案。2010年，Nigel等人提出了一种缩短密钥和密文长度的全同态方案[5]，并尝试了对该方案的实现，但其计算复杂度依然过高；2011年，CraigGentry等人在Nigel的基础上进行了优化，降低了计算复杂度，使得它们更容易实施[6]。Brakerski等人指出：依次使用模数转换能够很好的控制噪音的增长。据此，他们设计了一个层次型的全同态加密方案：Brakerski-Gentry-Vaikuntanathan(BGV)[7]，该方案被广泛接受并优化。其中，Halevi和Shoup针对BGV开发了HElib库[8]，随后BGV自举算法被实现：在打包的情形下，对300bit内容进行自举，一次大约耗费5分钟。2013年，Gentry等人利用“近似特征向量”技术，设计了一个无需计算密钥的全同态加密方案：GSW[9]，标志着新一代全同态加密方案的诞生。目前，基于GSW算法的各种优化还在进行中，如更高效的自举算法，多密钥FHE，电路私密FHE等。现有的选择仍然存在计算成本过高的问题。


互联网技术的飞速发展，促使不同团体或个人之间为了得到更全面更有价值的结果，利用先进的互联网和电信技术进行信息交流、资源整合，而信息与隐私泄露问题始终制约着合作的进行，有些参与者为了保护自己的私有信息，不得不以放弃合作为代价。如果存在一个可信的第三方，那么这个问题就可以很好地得到解决。我们只需要将每个参与方的隐私输入发送给可信第三方，由他来进行相应的计算并得到最后的输出结果，然后再将最后的输出结果广播给每个参与方，这样每个参与方就能得到正确的输出。但是，在现实生活中，我们很难找到这样一个完全可信的第三方。因此，安全多方计算协议的研究应运而生。SMC的形式化定义为：假设有n(n>2)个参与者P1，P2，…Pn，他们分别拥有各自的隐私输入a1，a2，…an，在不泄露自己秘密输入的前提下，联合计算某个多项式的函数f(X1,X2,…Xn)=y。在计算函数f的过程中，每个参与者只能知道计算结果y和自己的输入信息，而其他参与者的任何输入信息均不能得到。 


图灵奖得主AndrewYao在1982年首次以”百万富翁问题”提出了安全两方计算[10]。主要研究在私有信息不被泄露的前提下，多个互不信赖的参与者如何协作进行计算的问题。1987年，O.Goldreich等人[11]通过分析任意一种心理游戏，提出基于计算性安全且能够计算任意函数的安全多方计算协议。1998年，O.Goldreich发表专著《SecureMultipartyComputation》，系统的总结了该领域的研究。书中使用的模拟范例给出了安全性定义，以及敌手模型的定义，为以后许多研究奠定了理论基础；书中还指出“用通用协议来解决SMC问题中的特殊实例是行不通的[12]，因为它们的计算效率较低;应具体问题具体分析，并设计特定的安全多方计算协议。”这使得研究具体的安全多方计算协议成为近几年的热点。图灵奖得主Goldwasser曾预言[13]：“安全多方计算如同公钥密码学10年前所处的地位一样，它是计算机科学的一个非常重要的工具，而实际应用才刚刚起步。”
近年来，国外已有多所著名高校和机构投入到了SMC的研究中，如卡耐基梅隆大学、密歇根大学、普渡大学、布里斯托大学、微软、亚马逊，以及IBM等。在国内，SMC的研究同样已经引起政府、高校和科研机构的广泛关注，如清华大学理论计算科学研究所、国家信息安全重点实验室、中科院计算机所、上海交通大学、西安电子科技大学都已经取得了不错的进展。SMC的真正的商业化应用仍有一段很长的路要走。英国布里斯托大学的密码学团队奋战在SMPC协议改进的前线：他们评测了SPDZ、SPDZ2k、MASCOT、Overdrive、BMR混淆电路和姚氏混淆电路等协议[14]。密歇根大学正在研究SMC的扩容，该项目使用250,000人造数据，在一分钟之内实现七方计算[15]。此外，SMC技术在防止卫星碰撞[16]，纳税欺诈[17]，侦察性侵犯[18]，金融分析[19]，以及大学教育[20-21]等方面均有应用。安全多方计算作为信息安全领域和密码学领域的新兴方向，其研究在不断进行中，对该问题的不断探索具有重要的现实意义。


TEE是可信硬件平台的代表，由全球平台组织(GlobalPlatform，GP)于2010年提出。TEE是智能设备（包括智能手机，平板电脑，智能可穿戴设备等）主处理器上的一个安全区域，可以保证加载到该环境内部的代码和数据的安全性、保密性及完整性。基于TEE的安全防护，使得即使系统被越狱或root，攻击者也无法获取敏感资源的数据。
为了防止虚拟机层和内核的安全威胁，两大处理器厂商Intel和ARM分别提供了不同的底层支撑技术，通过构建处理器安全环境来实现系统安全防护。2013年，Intel提出了新的处理器安全技术(SoftwareGuardExtension,SGX)，它增加了一组新的指令集和内存访问机制，利用SGX的指令，可以创建支持应用程序合法部分执行的安全区，使这些操作的执行被隔离封装在安全的环境下。作为系统安全领域的重大研究进展，SGX对系统安全，尤其是云计算安全保护方面具有极大价值。SGX不会识别或隔离平台上的恶意软件，而是将合法软件的操作封装在一个安全区中，即使存在恶意程序或特权系统软件，安全区也能保证其中的代码和数据不被篡改和监听，保证代码和数据的机密和完整；SGX支持不同安全区的认证功能和数据密封功能，在安全的交互协议和软件设计中，这些安全属性可以方便的被应用。


我们追踪了近五年来业内顶级的论文和公开实验报告，对可信计算相关技术的发展和性能进行分析，力求客观公正的结果。本文的首先呈现同态加密的进展，近几年，微软、IBM和亚马逊在这个领域做了大量的研究和工作，试图抢占云计算的高地。
同态加密和多方计算中均涉及到的基础概念--逻辑电路：它是一种离散信号的传递和处理，以二进制为原理、实现数字信号逻辑运算和操作的电路。最基本的有与电路、或电路和非电路。如表1所示，一个AES函数由6800个逻辑电路门组成，而一个SHA-256函数则可以分解成90825个电路门。


BGV[7]是一个层次性全同态加密方案，可以同态计算任意多项式深度的电路，从而在实际应用中无需启用计算量过大的自举。IBM基于BGV方案推出了全同态的HElib[29]，在业内获得了高度评价，以下几篇论文分别对BGV方案和HELib的性能进行了测试：表2中包含自举和非自举两种模式，前者即全同态，该模式下，AES加密操作的相对时间是17.5s/block，block代表128bit，解密需要27.1s/128bit；相比之下，常规处理模式执行AES加解密操作的吞吐量大约是128byte/ms，比前者的性能高达3-4个数量级。
实验环境：IntelXeonCPU，E5-2698v3@2.30GHz（Haswell处理器，32核，250G）
参数说明：数量d代表slot的尺寸（是pmodm的顺序），D是维度大小，标有“坏”的D值表示“坏”维度，φ（m）定义为m的分圆多项式


表3显示了旧默认行为与新默认行为在MatMul1D计算的运行时间对比（以秒为单位）。对于尺寸为682的大尺寸（这是许多应用的典型尺寸），如果它是一个好的尺寸，我们得到加速度为30，如果是坏的话，加速度为75。较小尺寸的加速不那么引人注目，但仍然非常显着。进一步在多核模式下进行测试，表4显示了使用多个内核进行并行化的有效性。使用1个，4个和16个线程显示MatMul1D的时间。虽然加速不会随着核心数量而线性扩展，但它们显然非常重要，16个核心在大尺寸上产生大约8倍的加速，在小尺寸上产生4倍的加速。


微软SEAL号称性能最高的同态加密库，易于使用且功能强大，它支持BFV和CKKS加密方案，以下这篇论文对其进行了详尽评测。
执行环境：IntelCorei7-3520Mat2893.484MHz参数说明：密文是n维向量，其系数模为q，消息是另一个模数p，P1、P2分别是相应bit位长度的值（表5）。
SEAL对加密数据实施了Logistic回归模型，128bits的密文转化为4,096bit，大概1MB的数据产生超过10Gb的加密数据。对P1，P2分别进行加解密、加法和乘法运算，实验结果如表6所示：展示了一个典型的用于医疗保健预测分析的函数的方案，对该方案的各种核心操作进行了基准测试，性能结果总结在表6中。所有这些核心操作都以毫秒表示，可以认为是实用的。加密和解密操作由用户在将数据发送到云之前和之后执行。云接收加密数据，以加密形式对此数据执行添加和乘法，并将加密结果发送回客户端。加密数据的大小相对较大：使用参数P1，单个加密值为64千字节。因此，与云服务提供商(Microsoft的WindowsAzure)的通信开销占据了整个计算所花费的时间。在实践中，外包计算的时间从不到一秒到两秒不等：这远远超过了对数据进行加密，解密和计算所花费的时间，但仍然相对实用。


表6.使用参数集P1和P2在其同态加密中执行的核心操作的性能结果，结果以毫秒表示
根据以上几篇论文的实验结果，我们认为FHE目前仍然处在学术研究阶段，距离商业化还有很长的距离，按照目前的发展速度需要3年左右。经过了多年的发展，安全多方计算在半诚实对手模型取得了一定的进展，但在恶意攻击者模型或者多方模型中还不太理想。
实验参数：AES运算，input和output是128bit，s'=125（安全系数），depth=50


基于[32]的实验，其运算成本是224,000固定基指数，32,000常规指数和11,050,000对称加密（每个电路需要一定数量对称加密来构造）。相反，取l=128和s=40，此文的成本是309,120个固定基指数，37,120个常规指数和3,749,600个对称加密。此外，[32]的带宽约为112,000个组元素和3,400,000个对称密文。以每组元素220bit（例如，使用点压缩）和每个密文128bit的最低成本，得到大约449,640,000bit，或接近半千兆字节。相反，该文对该电路的协议带宽为133，120组元素和1,159,680个密文。使用与上述相同的参数，这将是大约177,725,440位，这低于[32]的成本的40％。这是非常重要的，因为带宽在许多情况下成为瓶颈。在较大的电路中，差异会更加明显。
参数说明：k-计算安全参数，s-统计安全参数，q-电路规模。表8显示了A针对各种电路大小和安全级别必须发送给B的数据量。在表中，qk指的是迄今为止由随机预言模型中的非LEGO协议实现的最小通信开销，例如，使用诸如[34]之类的协议使用随机种子检查。2qκs反映了标准模型中当前最佳的非LEGO协议[35]。表8还显示了MiniLEGO和TinyLEGO的通信开销。正如预期的那样，TinyLEGO对桶的构造方式的优化以及选择切割和选择检查分数的灵活方式.在所有电路尺寸上都超越了MiniLEGO。TinyLEGO优于非LEGO协议的电路大小取决于是否使用随机种子检查。通过随机种子检查，在TinyLEGO与非LEGO协议相同之前，需要大约10亿个门的电路大小。在这篇论文，一个AES算法需要的通信量是24M左右，相比于之前的工作有了很大的进步。


表8.在k=128时，A发送给B的每个电路门的bit数量
在这篇论文中显示了基于TinyLEGO在两方计算中的性能，除了基础的AES、SHA-256之外，还有汉明距离、整数乘法和排序等复杂函数，对应的电路门信息如表中所示。


此文分别测试两个节点同在AWS的本地服务器（局域网）以及分别在AWS本地和远程服务器（广域网）的上的情况，实验结果如表10所示，该协议在总体时间和在线时间方面比以前的协议表现更好。与Wang等人[37]的协议相比，实现了总体2.7倍的加速，并且在线时间提高了约10倍。与Nielsen等[38]的协议相比，在线时间大致相同，但离线时间在局域网设置中为4-7倍，在广域网设置中为1.3-1.5倍。
公链部署在异构网络中，所以参考广域网的模式更符合实际，该模式下，一个SHA256仍然需要2,376毫秒。接下来在不同的摊销设定下，使用多个线程，每个线程构成一个不同的乱码电路。进行对比实验，与Nielsen等人[38]的最佳结果相比，他们的协议提供了一致的改进，结果如表11所示。
表11.摊销设定的比较。所有实验都评估AES，τ表示执行的摊销数量


最后分别测试一些复杂的算法，比如汉明距离、整数乘法、排序等，示例的性能如表12所示。局域网和广域网设置之间的在线时间差异大约为75毫秒，这大致是使用的广域网的往返时间，这与协议仅需要一轮在线通信（来自每一方的一条消息）的事实一致。为了将我们的结果与最先进的半诚实协议进行比较，请注意，可以以每秒约2000万AND门的速率进行乱码。因此，例如，可以在半诚实设置中以大约0.5秒的在线时间进行排序。
这篇文章中离线预处理部分符合条件的电路，从而大幅减少了中间产生的数据。表13中，报告了协议的原型从电路构造器传输到电路评估器在AES-128和SHA-256算法上的数据量。对于1024个AES-128和256个SHA-256，分别传输总共8.12MB和4.09MB，并且对于这两种情况，大约99％的通信源从最初的BaseOTs。对于表13中的数据，可以在括号中看到，当考虑更多评估时，电路的相对预处理成本如何降低。我们强调在这项工作（和以前的LEGO协议）中，这是由于产生的门数量增加，而不是由电路数量决定。作为这种效果的一个例子，从具有6928门的单个AES-128到具有7094272门的1024AES-128，将独立预处理的成本降低了2.3倍每AES-128，从14.94MB降至6.42MB。


表13.执行AES-128和SHA-256算法，在协议的不同阶段，评估者收到的参数和数据，其中k=128和s=40，括号中的数字是每个电路产生的数据。
以上研究结果表明，尽管这几年在计算复杂度和通讯优化上取得了很大的进步，从计算性能这个角度看，高于明文计算10个数量级，另一方面带宽的限制也非常明显。两方计算，产生了庞大的数据，对内存和网络都形成了巨大的压力，现阶段可以应用对性能要求不高的简单场景之中。


TEE领域中，IntelSGX是最为成熟的平台，我们就从IBMresearch的一篇文章说起，评估现有TEE的性能。执行环境：Inteli7-6820HQCPUwith2.70GHz,16GB2133MHzDDR4RAM，Ubuntu16.04OS，单线程模式。
在低数据量的情况下，CPU上下文切换和进入退出安全区对性能的限制很大；而在256kb的时候，前述方面的差距就比较小；在8M的时候在安全区的性能下降很大，这可能跟额外的L3缓存(8M)在读取一个安全区本地数组的时候消失有关；当达到EPC的容量限制(64M)时，性能显著下降；当在一个安全区调用拷贝函数时，一旦拷贝数据内容大于64kb会导致性能下降。


对于小尺寸信息，在计算sha256的吞吐量方面存在巨大差距。随着消息大小的增加，即使对于非常大的数据，间隙也不会完全关闭。处理大容量数据的吞吐量是：openssl-435MB/s，sgxsdk-350MB/s(openssl吞吐量的80%),sgxssl-295MB/s(openssl吞吐量的67％)。


sgxsdk在trusted模式下达到了untrusted的一半是因为没有使用intel的AES-NI硬件优化；sgxssl的低效则被intel修复；trused模式下的opaque则达到了高性能。


为了获得最大的性能，明确初始化OpenSSL，实验结果显示sgxssl的性能与Opaque库的性能非常接近，并显示出相同的整体表现。


通过在可信和不可信设备之间有效地划分DNN计算，研究了TEE中的深度神经网络（DNN）的高性能执行。基于矩阵乘法的有效外包方案，此文提出了一个框架，它可以安全地将来自TEE（如SGX或Sanctum）的DNN中的所有线性层的执行委托给更快但不可信的共处理处理器。通过在SGX飞地中运行DNN来评估Slalom，该飞地选择性地将工作委托给不受信任的GPU。
此文进行了实验中不包含多线程处理，图9绘制了验证线性结果的相对加速比与在飞地中进行计算相比。虚线表示直接计算所获得的吞吐量。“融合”可分离卷积不包含中间激活。由此可见对于给定场景，安全可信处理器的效率比最佳可用但不可信硬件低最多一个数量级，接着将计算的中间层外包至GPU，如图10所示，将完全在飞地中执行DNN的基线（蓝色）与不同的安全外包方案进行比较：使用Freivalds算法进行完整性验证，有1.6到2.3倍的加速，以红色表示；使用Freivalds和预先计算秘密数据进行完整性验证，在MobileNet上进行可验证推理时，实现了3.6到6.4倍的加速，以黄色表示；只有私有DNN推理，对于没有中间激活的VGG16和融合的MobileNet变体，实现了私有外包的12.7倍和5.0倍的加速，以黑色表示；在私有DNN推理的同时保证完整性，获得了10.4倍和4.1倍的加速，以紫色表示。


上述几篇论文和测试报告表明：从性能上看，SGX能满足大部分业务需求，对于机器学习等复杂运算，需要改造模型以符合其特性。至于侧信道攻击，Intel进行了积极修复，同时需要通过在程序设计上隐藏控制流和数据流来规避相当程度的攻击。
通过对以上三种技术进行分析，可以得出如下结论，在计算性能和带宽角度来看，安全多方计算和全同态加密均有很大的局限性，难以满足复杂运算的需求，如机器学习。另一方面从应用设计复杂度、技术成熟度和生态来看，TEE具有着最多的优势，在未来3年之内，TEE将是最具竞争力且实用的方案。








