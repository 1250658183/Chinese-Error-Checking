



在这里，万亿美金级的数据经济市场迎来了一个重磅破局者，基于GXChain的可信计算协议——TCP（TrustedComputingProtocol)。因此，我们设计了可信计算协议，去完美地解决这一矛盾。在保护隐私的前提下，进行数据计算，充分开发数据的商业价值，进一步提升数据的经济附加值。这一过程，我们称之为“可信计算”。
社交巨头Facebook深陷5000万用户数据泄露的隐私问题，华住5亿条数据在黑市公开叫卖，众多软件在后台启动调用手机的摄影、录音、通讯录等等敏感权限，庞大的数据黑市仍在不断扩张，数据商业繁荣也将个人数据隐私问题推到了聚光灯下，公民的“数据权”意识逐渐觉醒，对于个人隐私，人们从未像当下这般焦虑。大势所趋之下，各国政府也在不断加强对数据隐私的保护，对企业的数据应用施以高压。在互联网中心化的商业模式下，提升数据的商业利用效率几乎必然造成对用户数据隐私边界的蚕食。“数据隐私权”和“数据商业效率”之间的矛盾还将愈演愈烈。
TCP不是一个简单的技术协议，而是一个剑指万亿数据经济市场的商业平台，将成为数据经济市场的破局者。TCP能在保护用户隐私的同时，大幅提高数据的附加值，让企业利用数据创造更高的价值，也能让用户享受数据带来的经济收益。GXChain团队基于面向企业的大规模商业落地场景设计的可信计算协议，是区块链技术落地数据经济领域的基础，也是区块链大规模商用的突破点。未来，会有越来越多的数据商业模式基于TCP拔地而起。
TCP，一个数据经济新时代的开端，即将点燃这万亿美金的市场。




人类社会已经进入到“数据和智能商业时代”。越来越多的商业服务开始在线化，业务变得数据化，同时引入AI分析数据，优化和执行决策，商业的循环将演化地更加高效，数据+智能毫无疑问会是驱动人类生产力爆发的下一对双轮。最后，TCP是一个Layer2扩容方案，遵循Plasma协议，可以为任何区块链项目提供可信计算和复杂运算。TCP最终实现在保护数据隐私的前提下进行复杂计算，有效地降低了企业敏感数据的法律风险，提升了数据变现能力，助力深度学习和人工智能等行业的发展。
但伴随着数据爆炸和AI能力的突飞猛进，层出不穷的数据泄密、隐私侵犯等恶性事件不断出现，公民的“数据权”意识逐渐觉醒，各国政府也不断加强数据隐私的保护，对企业在数据的应用上施以高压，压缩了数据的商业化空间。“数据隐私权”和“数据商业效率”的平衡，可谓数据经济时代最大的难题之一，本文为解决这个关键问题提出了解决思路和技术方案。
在本文中，我们提出了可信计算协议（TrustedComputingProtocol，简称TCP），这是一个结合区块链和可信执行环境来解决上述隐私保护问题的系统。TCP是一种新型的架构，将共识与计算解耦。实现高效的TEE（TrustedExecutionEnvironment）支撑的可信计算和高可扩展性，我们重新设计了状态模型，并且在Tendermint共识算法中增加公平的随机数，力图达到更高的网络吞吐量以及体现去中心化治理的价值。另外，我们设计了一套去中心化的密钥管理系统，可以动态更新密钥，将达到更高的隐私保护安全性。


随着云计算的不断发展，为了实现更高效的数据流通和数据计算，集中化的数据管理方式被广泛采用，同时产生了众多因数据管理不当而导致的隐私泄露问题。在没有行之有效的隐私保护技术方案出现之前，各国纷纷颁布了数据隐私保护条例，通过法律来约束对数据的使用。
可信计算的诞生，是为了通过各种密码学技术，在保护数据隐私的同时，使得数据得以大规模应用。本文提出的TCP，是一种以区块链技术作为信任基石，结合链下计算和TEE的隐私保护计算方案。该方案使得企业和个人可以把数据处理模型部署在区块链上，在链下可信执行环境中处理隐私数据，最终把可验证结果存储到链上并更新状态，整个过程通过密码学和TEE等手段来保证数据的隐私和安全。


人类文明诞生以来，集中化成为一个主要的竞争优势。社会化和集中化的政府能发展出更多先进的技术，累积更多的资源，推进社会的快速发展。在过去的十年中，网络的惊人增长与集中化的趋势相结合，使一些大公司拥有了网络的关键节点，并因此在网络上积累和拥有了大量数据。而缺乏透明度和相关法律法规产生了数据集中化的消极影响：操纵[1]，监视[2]和频繁的数据泄露[3]。我们努力寻找一种新的模式，通过集中化实现最大化的产出和效率，并运用去中心化的治理机制，减少传统的集中化数据处理模式中存在的问题。
比特币[4]和其他区块链[5]向大众承诺一个美好未来。如今可以使用分布式架构构建应用程序，在其中没有任何一方拥有绝对的权力和掌控力。区块链的公共性质保证了应用程序工作方式的透明，并留下了不可篡改的活动记录，为诚实行为提供了强有力的激励。比特币是第一个这样的应用程序，开启了一个新的网络范例。现代应用程序使用大量数据并对其进行分析，然而区块链的强烈验证和公开性限制了潜在的使用案例，这个限制意味着只有受信代码可以在区块链上运行[6]。问题是，现代应用程序中许多最敏感的部分需要对隐私数据进行大量处理，而区块链的公开透明和全节点验证，数据将流经区块链上的每个全节点，使其无法很好的处理隐私数据。
这种模式有一个自相矛盾之处：最敏感的隐私数据只能在集中、不透明和安全未知的模型中存储和处理。我们已经看到这种模式导致了灾难性的数据泄漏，以及我们目前在网络生活中不得不承受的系统性隐私保护缺失。另一方面，区块链全网同步验证和执行的机制使其不适合处理复杂的计算。


可信计算在区块链的背景下发挥重要作用，围绕着这个主题，我们分别介绍在近年来在TEE、区块链扩容和共识算法领域取得的最新进展。
首先，在TEE领域，最近有一些项目尝试在英特尔SGX中执行区块链应用程序、智能合约和机器学习。微软发布的Coco框架[7]，它提供了一组基于英特尔SGX的构建模块，可用于保护区块链系统数据隐私。R3Corda分布式账本平台宣布了使用SGX的隐私功能[8]。Teechain[9]是一种在比特币之上进行离线支付的系统，它利用SGX在不信任方之间建立有状态的支付渠道。ZhongshuGu等[10]开发了DeepEnclave划分深度学习模型，利用SGX来缓解推理通道中的敏感信息泄漏问题。RolandKunkel等[11]提出TensorSCONE，一种基于TensorFlow的通用且安全的机器学习框架，支持在不受信任的基础架构上（SGX）上安全执行现有应用程序。T.Hunt等[12]设计了基于SGX安全区实现的Chiron，一个用于保护隐私的机器学习即服务的系统。其次，在公链扩容领域，主要分为链上Layer1和链下Layer2扩容。著名的Layer1方案，早期是比特币的隔离验证（SegWit[13]），近来是以太坊的分片（Sharding[14]），它将在Casper中实施；与此同时，Layer2方案受到越来越多的关注，全球团队主要采用状态通道（StateChannel）和侧链（SideChain）两种解决方案。著名的状态通道有基于比特币的闪电网络（LightningNetwork[15]）和基于以太坊的雷电网络（RaidenNetwork[16]），后者为ERC20和ERC223标准代币专门设置的状态通道；侧链方案中，Cosmos[17]在多方跨链通信方面做了非常充实的工作，其共识算法具备良好的性能；Plasma[18]是VitalikButerin等提出的，目标是将很多智能合约计算移到侧链而非主链上执行，目前已经有数个可实施版本。最后，在共识算法领域，比特币和以太坊的工作量证明（PoW）已经稳定运行多年，在权益证明PoS提出之后，近两年来涌现出很多PoS的变种以及BFT的改进版本。Algorand[19]采用的BA*是一种优化的BFT算法，采用可验证随机函数（VerifiableRandomFunction，简称VRF）的方式选择区块发布者；Thunderella[20]选出一个委员会采取同步非BFT的方法做共识，称为快速通道，与前者的思路类似；Cardano的Ouroboros[21]是一种PoS（DynamicProofofStake）算法，在最新版本里面也同样采用VRF算法；Dfinity[22]巧妙地利用门限签名算法生成随机数来选择下一轮共识节点组合，它也是一种PoS算法；Tendermint[23]是一个异步PoS算法，并且提供拜占庭容错，比起同步PoS算法更快，并且不需要担心安全问题。


可信计算的可信意味着“如果一个实体的行为总是按照预期的方式和目标进行，那它就是可信的"[24]。可信计算的核心思想是“终端源可信传递”，这与其他传统意义上的安全方案有着本质性的差异。
可信计算协议（TrustedComputingProtocol,简称TCP），是在可信计算的基础上进一步扩大信任的边界，实现可信数据采集、可信数据存储、可信数据交换、可信数据计算和可信数据应用，同时使用多种隐私安全技术，来达到高效的可信赖的计算范式。上式中，代表加密的计算执行结果，表示返回的可验证计算的证明，代表解密函数。这个可验证的计算结果中的和作为交易的一部分发送到共识网络中，达成共识，然后向合约调用者或部署者发送。代表世界状态，代表交易级状态转换函数，代表区块级状态转换函数，是区块定稿状态转换函数，交易中包含着可验证计算结果的hash值、和交易本身的支付信息，区块中包含上一个区块头的引用、Validator签名和交易的集合。上述的公式描述了可信计算的整个过程：数据通过加密的方式进入到可信执行环境，在可信执行环境中解密和执行，可信计算得到的可验证结果通过交易的方式发送到区块链上，使区块链世界状态从转变为。
首先，我们用一个简单的公式来定义可信计算的过程：
其中代表可信计算，表示可信执行环境，表示模型（私钥只在可信执行环境中持有，不会向外泄露），表示加密数据。


我们对可信计算行业进行了深入分析，在安全性和隐私保护层面，同态加密（HomomorphicEncryption）[25，26，27]和安全多方计算（SecureMulti-partyComputation）[28，29，30]在密码学的范畴给出了优秀的答案，但在计算和通信复杂度方面，则面临着很大的局限。在计算性能方面，可信硬件[31]综合了前述两种方案的优势，具备更高的计算性能，满足我们的预期。
现有绝大多数公链，由于交易需要在全网每一个全节点上执行，存在大量的冗余计算，并且随机节点数量的增加，其计算性能不会超过单节点的计算能力。我们思考在不同的场景之下，满足多种形式计算的需求（比如可信计算、复杂计算），减少之相应的计算冗余度并大幅降低交易费用。我们设计了分层网络并优化了共识算法，将计算与共识剥离开来，在正常的状况下，交易只需要单个节点执行，整个网络的计算能力会随着计算节点数量的增加而提升。以上三点是TCP的基本特性，在此我们给出一个标准的定义：TCP是一个去中心化的可信计算协议，我们致力于在trustless环境中，为数据持有者和数据消费者之间搭建信任的桥梁。不同于传统的行业模式，我们使用区块链作为底层基础架构，解决价值流转层面的问题，同时具备区块链的可溯源、防篡改、智能合约等基础属性；在底层使用TEE提供的安全可信计算环境，解决数据泄露层面的问题。
我们定位自身为一个Layer2方案，可以为任何公链提供计算扩容和可信数据计算能力，我们实现了Plasma协议，在此基础上针对我们的状态模型进行改进，这样我们就可以在不破坏公链共识的前提之下拓展其共识的价值，丰富其通证使用场景，为其赋予更多的想象力。


在这一章描述本文中涉及的基本符号，我们参考以太坊黄皮书的符号体系，做基本的约定：


在主流的分布式共识算法中，整个区块链网络的性能不会超过一台单节点，智能合约的链上计算本质上是昂贵的，并且受限于区块大小和出块间隔，难以满足链上复杂计算的需求。共识算法是TCP的重要组成部分，我们通过结合Tendermint以及基于BLS[32]签名的门限签名算法，实现了公平的随机记账和高效的共识。
另一方面，主流的BFT以及衍生算法，比如Tendermint、EOS等，缺少完善的节点奖惩机制和选择记账节点的随机性和公平性。在比特币的工作量证明机制中，所有节点依赖算力竞争出块，本质上是一个随机性事件，它保障了记账在节点级别上的公平。在PoS的一些衍生算法中，通过MPC等方法生成随机数用来确定下一个或者多个记账节点，本质上也是随机性事件，降低了记账节点受DDoS攻击的风险。


TCP使用基于Tendermint结合DKG（DistributedKeyGeneration，如[33]）和BLS[32]的改进共识算法，它具备以下特性：图2展示了一个区块形成过程中的状态机转换，图中的Propose，Prevote，Precommit，Commit，NewHeight代表每个Round中状态机的状态。一个区块的提交需要经过Propose、


Prevote和Precommit3个阶段。共识算法基于Round的机制来确定下一个区块，Propose->Prevote->Precommit的完整过程称为一个Round。在Prevote阶段，验证人对提议的区块进行预投票，如果有超过2/3的验证人投票，则进入Precommit阶段。在Precommit阶段，验证人对提议的区块进行预提交，如果有超过2/3的验证人投票，则进入Commit状态，区块被提交到链上。
在Propose阶段，由共识算法从验证人集合中选出一个验证人对区块进行提议。
每一轮开始，验证人对新一轮的区块进行提议(Propose)。合法的提议区块，先经过一轮的预投票(Prevote)，在提议区块获得2/3以上的预投票后，进入下一轮的预提交(Precommit)，同样是获得2/3以上的验证人预提交后，被提议区块被最终确认。
在第一轮预投票中，我们引入分布式密钥生成算法（DKG），生成各方共享的密钥；在预提交阶段，我们使用基于BLS的门限签名算法生成额外的签名分片（SignatureSharding），并在最终提交的区块中合并成一个最终签名。利用这样的多方共同生成的签名来生成随机数，可以做到随机数的均匀性、相互独立和不可预测性，实现公平的链上随机数。


由于一些原因，比如提议者离线或者网络非常慢，导致验证人可能在提交一个块时失败。共识算法允许一个验证人被跳过，在进行下一轮投票前，验证人会等待一段时间，从提议者那里接收一个完整的提议块。只有在接收到超过2/3的验证人投票时，才会采取下一步操作。网络中的任意节点可以通过抵押保证金的方式成为验证人参与共识。如果验证人作恶，将会被没收保证金。对比比特币网络的工作量证明，保证金机制增加了节点的作恶成本，提高了区块链网络的整体安全性。其中代表第t轮生成的随机数，代表节点数量，代表第t轮的记账节点。基于公平性和实用性的考虑，我们可以动态的设置epoch，调整随机数生成的频率，结合节点综合序列，在公平和效率上达到平衡。
为了实现记账的随机性，从而提高节点记账的公平性和网络的安全性，我们在共识算法中增加完全公平的随机数。共识过程中的区块提议者，由共识节点共同参与生成的随机数来决定。每一轮都会通过基于BLS的门限签名算法生成区块的最终签名，将其作为随机数并取模，将得到的值映射在基于节点权益和记账效率的序列中，从而得到完全随机的下一轮区块提议者。区块提议者选取公式如下：
验证人记账权重，根据其币龄和参与出块效率作为作为综合权重，我们将出块效率放在首要的位置：其中代表币龄，代表出块效率，、是对应转换函数，是重置函数，它会在一个epoch中衰减并在下一个epoch开始时重置。
在上式中，是指量，指衰减常数，是初始量，一般是所有记账节点的保证金加上出块奖励的总和。


1.Validator，验证人，参与共识过程中的投票，不同的验证人拥有不同的记帐权重2.Proposer，提议者，使用公平的随机算法从验证人集合中选出。根据记帐权重选择区块提议者，记帐权重越大的验证人被选为提议者的概率越高。
假设所有节点的总数为R，拜占庭节点数量为f。设想f个叛变者和k个忠诚者，叛变者可以给出错误的结果，也可以不响应。某一时刻，f个叛变者都不响应，则k个忠诚者取多数也能得到正确结果。当f个叛变者都给出一个恶意的响应，并且k个忠诚者中有f个离线时，剩下的k-f个忠诚者此时无法分辨是否混入了叛变者，仍然要确保取多数才能得到正确结果，因此k-f>f即k>2f，所以系统整体规模需要满足R>3f。1.当超过1/3的验证节点发生拜占庭行为时，系统将停止工作，在交易安全和停机风险之间选择安全；2.出现验证安全问题，可以对冲突进行投票，广播有问题的选票，作为证据提交；3.如果遇到对同一特定区块的同意及否决信息同时超过2/3的情况，需要启用外部的维护机制去核查是否存在超过1/3的验证节点伪造签名或者签署两个相互矛盾的投票。
采用绝对多数的选票选定的最优拜占庭容错算法，可以保证：
区块链的三元悖论是指区块链系统的去中心化、安全性和可扩展性只能取其二。在现有的区块链中，由链上合约执行计算，成本高昂并且有指令数和区块大小限制，比如以太坊设置区块的最大GasLimit，整体性能远远无法满足商业化落地的需求。因此我们设计了分层网络和状态模型，解耦计算与共识。这样的方式可以充分利用计算节点的资源，避免冗余计算，大幅提升网络吞吐量。


以太坊是典型的以事件作为驱动的状态模型，在区块中存储的是事件，网络中的每一个节点都需要对events达成共识并执行交易更新世界状态。经过对分层网络模型[21，34，35]的设计理念进行研究，我们认为在区块中存储状态和证明是更加优雅的方案。因此我们设计了一个状态模型，每一个交易（transaction）包含事件（event）、状态（state）和交易证明（attestation），如图所示：
在一笔transaction具体包括：event，修改前后的state，计算证明attestation以及执行结果的哈希值。我们将在未来的工作中引入零知识证明（例如zk-STARK[36]），实现通用的可验证计算。
用户可以指定在网络中注册的任意计算节点，向其发送请求（包含合约的cid，输入参数，请求签名signature等）。计算节点验证交易发送者的signature，根据合约cid去链上拉取合约代码，同时向数据持有方请求数据。当合约代码和数据准备完毕，则在Enclave中完成初始化并执行。执行结束之后，将交易证明attestation、新的状态state和请求req等组装成完整交易发送至共识网络中。在公式2-2中，我们定义了抽象的执行过程，使用输入参数来执行模型，得到执行结果和证明。在这里，我们对其进行具象化：
在上式中，state包括修改前后的状态，result是合约执行结果，attestation则是交易正确性和完整性证明，DEC是抽象解密函数。数据使用合约公钥加密，DEC调用DKMP服务获取对应的合约私钥从而解密数据。


当共识节点收到计算节点发来的交易时，验证请求发送者的签名、attestation中的安全计算证明和前状态hash值，一旦验证通过，则加入交易池并全网广播交易，共识节点将交易打包并形成共识。安全计算证明由英特尔远程证明服务（IntelAttestationService，以下简称IAS）提供，在TEE（下文特指IntelSGX）的安全区中执行合约生成的证明，由计算节点发送至IAS，生成最终的证明[39]，其表示的有效性，是IAS对和的签名。这样，我们定义链上验证的函数:
共识节点验证不需要TEE也不需要依赖IAS。为了共识的健壮性和通用性，将在未来的工作中增加零知识证明。
基于对当前行业的研究与分析，我们选用TEE作为我们可信计算平台的核心组件，更多的TEE内容在4.4节中体现。各大公司在使用TEE进行可信计算方面做了很多实践，与此同时，最近的研究表明，针对TEE的旁道攻击仍然会导致数据泄露。现阶段的防御手段一般分为三个层次：源码级别（例如利用bitslicing来增强AES和DES[37]），系统级别（例如TSX技术来保护Enclave的自身时钟[38]）和硬件级别[39]。这些方案只解决了特定领域的具体问题，在普适性方面存在着巨大挑战。尽管如此，我们仍然希望最小化受损的TEE能造成的安全影响，Ekiden[40]采取的方法是在空间和时间上划分区域。为了应对一定数量的TEE受到破坏的情况，同时在业务上独立于硬件级别的公私钥，我们设计了关键协议：分布式密钥管理协议（DistributedKeyManagementProtocol，简称DKMP)，即使特定阈值范围内的TEE的机密性受到破坏，仍然不会泄露密钥，同时实例化此协议的组件以服务的形式提供并设置访问规则。更进一步的，我们还将采用主动密钥旋转[40，41]来限制密钥泄露的范围。


DKMP在安全秘密分享组（SecureSercetShareGroup，简称SSSG）中生成、管理和合约的密钥分片。SSSG是共识节点的一个子集，由共识算法中的随机数（见4.1.2）来决定，它的成员分布式地储存密钥分片为合约提供密钥支持。DKMP是对TEE密钥管理的一层抽象，它包括DKG和移动主动密钥分享算法（MobileProactiveSecretShare[42]，简称MPSS）。
1.分布式密钥生成（DKG）：允许一组多方成员共同生成多项式，每一方都得到无偏差的随机密钥。DKG协议的运行结果是每一方能获得一份密钥对，并共享一个公共公钥。整个协议分为两个阶段：第一阶段应用DKG在SSSG中生成共享密钥；第二阶段应用MPSS将密钥从转移到中，MPSS协议的执行周期可以动态调整。
2.移动主动密钥分享（MPSS）：允许一组多方成员保存共享密钥，并且能动态的在不同的多方成员组中传递密钥分片。MPSS协议的运行结果是，多方成员组共享的密钥分片在不同的成员组中接替保存密钥分片。
DKMP需要共识网络中生成的随机数来确定SSSG，并且在特定个epoch更新SSSG。在DKMP中，我们考虑了SGX可能受损而泄露数据的情况，在此基础上分析DKMP的安全性。已知共识节点的总数量为N，SSSG的成员数量为n（n<N），恶意节点的数量为f，能恢复出共享密钥的节点阈值为t（t<n），我们将基于以下三种情况进行分析：1.f<t在简单的情形下，每在一轮中，恶意节点的数量都少于t，恶意节点拥有的部分密钥分片无法还原出密钥，则整个DKMP是安全的；2.2f>t在这里我们讨论两种情况下可能会发生数据泄漏的可能：1）每个epoch，节点持有的密钥不会动态更新。假设在不同的epoch中，均有不同的f（f<t）个节点泄露密钥，则泄露的密钥分片数量大于t，密钥将被还原出来。2）每个epoch，SSSG动态更新，密钥分片从原来旧的节点组中转移到新的节点组，假如f个


恶意节点同时出现在新旧两个SSSG中，最差的情况下，恶意节点可以拿到2f个分片还原出密钥。MPSS算法可以防御上述两种攻击，在每一个epoch，SSSG更新后，每个新成员节点i得到了新的密钥分片，其中P(i)是最初的密钥分片，是由特定数量以上的SSSG成员一起生成的随机多项式。每一个epoch，都是不一样的，从而保证在即使拥有不同epoch的总共2f>t的密钥分片，恶意节点无法使用不同的分片还原出密钥。3.f>t在这种极端情况下，数个TEE节点同一时刻遭受侧信道攻击的概率微乎其微。我们考虑这种情况，采取措施将损失最小化，包括动态调整阈值t降低后续的泄露风险，通过经济奖励和惩罚来激励参与方等。与此同时，对于计算节点来说，当其由能力和声誉良好的组织管理时，TEE受损的风险m%很低；当其由任意符合我们的条件并开放进入计算网络的组织来说，这个时候TEE受损的风险m%很大。在处理第二种情况时，有三个层面的解决方案：其一向SSSG请求密钥将验证远程证明的证据；其二是对SSSG对返回的密钥分片进行适当的旋转，这样受损TEE只会获得一定时间内的密钥；其三是通过通证抵押、奖励和惩罚来约束计算节点的行为。
我们采用的可信硬件TEE是Intel的SGX平台[43，44，45]，它是一种特殊的硬件级TEE，可以保护计算的机密性和完整性，并且可以生成能证明计算正确性和完整性的证据，通过发出远程证明、数字签名，使用只有硬件知道的私钥，通过程序和执行的输出来证明程序是正确执行的。SGX将操作系统、管理程序和BIOS等都屏蔽在安全区（SGX创建的可信执行环境）内存之外，它的内存加密引擎可以保证数据完整性和机密性并防止内存重放攻击[46]。
即使SGX具有如此多的优秀特性，但它并非完美。首先，在多个SGX的安全区同步密钥保障了系统服务的可用性，但也意味着更大的密钥泄露风险；其次，与硬件深度耦合将限制TCP架构的灵活性和健壮性。同时考虑到TEE存在的安全性问题[47，48]，我们设计了不完全依赖于SGX的DKMP（详情见4.3.2），并基于SGX的特性做出相应的改进。


前文提到的安全区，我们在下文中将以Enclave来指代。安全防御设计涉及到两个层面上的问题：
首先，Enclave的安全性问题。Enclave所承载的内存使用带重放保护的工业级加密算法加密，即使直接访问内存，得到的也是加密过的数据。加密密钥保存在cpu中，在启动、睡眠等阶段会随机变化，这样保证了在Enclave中解密的隐私数据不会经内存泄露。IntelSGX技术从硬件cpu层级保证了Enclave代码一旦被修改，将无法通过验证，导致加载失败，从而无法获得私钥分片。同时运行模型的虚拟机封装在该Enclave内，虚拟机没有网络/文件IO功能，从而杜绝恶意模型泄漏数据。
其次，外部数据的输入的安全性问题。为了保证数据的机密性，外部数据在发送至计算节点前，使用合约的公钥进行加密。在Enclave模式下，进行密钥生成、密钥计算以及数据解密等操作，这样可以保证外部数据和密钥对外不可见、不可访问读取，从而保证了数据的机密性。
安全传输模型包括本地的ContractEnclave与DKMPEnclave之间和远程的DKMPEnclave与SSSG之间的安全数据传输模式。


1.ContractEnclave与DKMPEnclave的通信。在IntelSGX平台内部，为了在Enclave之间传送敏感数据信息，IntelSGX提供了本地证明来实现。图6描述了在ContractEnclave和DKMPEnclave之间传送私钥的详细流程：


计算节点利用了本地证明来实现ContractEnclave和DKMPEnclave之间的加密通信，在计算过程中将DKMPEnclave中的私钥加密传输到ContractEnclave，ContractEnclave再利用本地证明过程中生成的Diffie-Hellman上下文将私钥解密，这样就完成了本地Enclave之间的密钥安全传输。
2.DKMPEnclave与SSSG之间的通信。DKMPApplication（具有计算和管理私钥的服务）与SSSG建立加密信道TLS。SSSG中的节点收到请求，验证证明的合法性，验证通过则回复密钥分片。DKMPEnclave收到超过一定数量的有效密钥分片，将密钥还原出来，这样就完成了DKMPEnclave与SSSG之间的安全通信。值得一提的是，SSSGServices保存了所有私钥的分片，单个节点无法还原出密钥。
DKMPApplication向SSSGService证明合法性的流程如下：首先，DKMPEnclave和SSSGServices之间生成不透明的Diffie-Hellman共享密钥上下文（简称DHCtx）；其次，密钥分片在SSSGServices端使用DHCtx加密，将加密的密钥分片发送到DKMPApplication；DKMPApplication没有DHCtx则无法解密密钥分片，这保证了在非可信区私钥分片不被暴露；最后，DKMPApplication将加密的私钥分片交给DKMPEnclave，DKMPEnclave使用DHCtx将密钥分片解密，然后利用密钥还原算法计算出私钥。




上图结合远程证明表示DKMPApplication和SSSGService之间的密钥传输流程，一些关键步骤描述如下：
step1.DKMPApp向SSSGServices请求密钥分片。step2.SSSGServices回复DKMPApp，请执行远程证明。step3.DKMPApp创建DKMPEnclave。step6-8.通过ECall进入Enclave，在Enclave内部创建Diffie-Hellman上下文。step10.DKMPApp调用intelsdk获取GIDofEPID。step12-15.通过GID获取SigRL。step16-17.DKMPApp调用intelSDK处理SigRL并生成远程报告QUOTE。step18-20.将QUOTE发送给IAS并获取远程报告。step22.远程报告通过，使用Diffie-Hellman上下文加密私钥分片发送给DKMPApp。step23.DKMPApp将加密的私钥分片发送给DKMPEnclave。step24.DKMPEnclave使用Diffie-Hellman上下文解密分片并还原私钥。
step21.SSSGServices验证报告签名，如果报告通过继续发送私钥分片给DKMPApp，否则不发送并回复原因。


当前公有链的交易处理能力面临着很大的性能瓶颈，难以满足不断增长和多样的商业级应用。以太坊在这方面进行了深入思考，有许多方案，包括在基于Layer1的sharding和基于Layer2的状态通道、Plasma等。sharding面临着跨片交易等难以解决的问题，而状态通道无法部署智能合约解决多人交易的场景。因此TCP引入Layer2方案，支持plasma协议，因为它具有如下优势：Plasma-TCP将基于Plasma实现，通过在rootchain上的部署Plasma合约来定义充值、提现、提交区块证明和欺诈证明等规则。当有恶意行为发生时，诚实用户可以通过Plasma合约来终止恶意行为，安全地在rootchain中取回自己的资产，Plasma设计了一系列经济博弈的方式减少作恶情况的发生，比如取款需抵押资金、设置取款延时等，主要流程如下图所示。
1.将特殊类型的业务从主链中迁移出来，缓解主链的压力；2.在低共识的场景下，扩展主链的算力，提供庞大的吞吐量；3.在保持主链共识的前提下，为主链提供可信计算的特性。


1.Deposit：rootchain用户向Plasma合约充值，将资产锁定在合约里面。operator监听合约，根据合约内的资产锁定证明，在子链上为对应的用户入帐。3.StartQuit：取款，在主链上恢复资产。用户可以在任何时刻退出子链并取回合法的资产，取款操作需要经过一个争议期（比如七天）之后才能完成。
2.SubmitBlock：operator周期性的向Plasma合约提交子链区块证明，任何用户都可以向Plasma合约发送区块级欺诈证明，合约一旦验证这个证明，并且在特定时间后，opeator提交的区块将会回滚，并对operator进行处罚。4.ChallengeQuit：用户向合约发送退出请求，在争议期内其它用户可以发起挑战。挑战成功，则用户退出失败，扣除退出保证金，同时挑战者会得到一定的奖励；如果退出成功，Plasma合约释放资产到发出请求的用户。


为了保护主链用户资产的绝对安全，在任何时刻都能从Plasma中提取资产。在上述众多方法中，取款操作是最关键的环节，我们采用了以下取款策略：1.用户向Plasma合约发送取款请求，指定一笔保证金，带上子链上的最后一笔交易消息体，消息体中包含子链上最新的状态(余额),同时包含一笔用户在子链上的资产销毁交易；2.Plasma合约对取款请求参数验签通过后，该笔取款请求进入争议期，等待其它用户发起挑战。争议的主要内容：该证明是否是最新的状态；3.其它用户可以向该取款请求发起挑战，向合约抵押相应的挑战保证金。欺诈证明中需指定如下数据：4.用户取款成功后，由operator或其它用户，根据用户取款时的资产在子链上销毁/回收其对应的资产。
1）更高的区块高度上，取款用户发起的交易；挑战规则约定在Plasma合约中，挑战结果包括三种情况：1）挑战成功，发起挑战的用户获得保证金，取款用户请求失败，损失保证金；2）挑战失败，发起挑战的用户损失保证金；3）若无人挑战，争议期结束后，取款用户可取回自己的资产。
2）该区块中的，交易对应的merkle验证路径；Plasma合约利用挑战者提交的交易和merkle验证路径生成对应的roothash，判断roothash是否和对应区块高度的区块头中的roothash相同。


我们考虑以下三种影响系统安全性的主要行为，采取了不同的应对方案：
1.节点作恶：支持plamsa协议的主流项目大多采用POA单节点的共识机制，节点可以在子链发起双花交易。TCP采用的共识算法具有强一致性，区块一旦形成共识即最终确认，无法进行双花交易，从而避免这种情况。2.计算节点（ComputeNode）：拥有TEE环境的链外节点，可以在TEE环境中运行合约模型，为可信计算网络提供算力支持。客户端的计算请求，先发送给计算节点，由计算节点完成后，以交易的形式广播给共识节点。
2.节点停止响应：节点拒绝服务用户或者网络瘫痪，用户可向主链合约发起退出请求并支付保证金以取回资产。3.虚假欺诈证明：欺诈证明是一个带保证金的证明，用来证明取款行为的非法性。挑战者提交欺诈证明时，需要向合约支付保证金。一旦欺诈证明被证伪，挑战者会受到惩罚，失去他的保证金。3.共识节点（ConsensusNodes）：区块链网络中的记账节点，负责交易的验证和打包确认。在可信计算中，共识节点主要用来验证计算节点提交的状态更新。
1.客户端（Client）：终端用户或者消费者。4.安全密钥分享组（SSSG）：是共识节点通过可验证随机函数得出的节点子集。




1.客户端P向计算节点Comp发起ContractDeploy的请求，同时发送{contractcode}；2.计算节点Comp接收{ContractCode}，初始化TEE环境，生成cid，向SSSG请求合约的密钥分片，在DKMPencalve生成一对密钥{pk,sk}，并且生成一个合约初始状态state；3.计算节点Comp在TEE环境中生成一个部署合约的交易消息体TX{cid，pk，contractcode，state，attestation}，广播给共识节点Cons；4.共识网络Cons验证交易、打包、更新状态，形成全网共识；5.计算节点Comp向客户端P发送回执receipt。


1.客户端P向计算节点Comp请求合约执行，指定合约cid和input；2.计算节点Comp根据cid从共识网络Cons获取合约代码和状态{contractcode,state}，向数据源DataSource请求数据Data；3.数据源DataSource向计算节点Comp传输加密数据ED（Encrypt(Data)）；4.计算节点Comp在Enclave中向SSSG请求cid对应的密钥分片，还原出合约的密钥{pk,sk}；5.计算节点Comp在Enclave中，使用sk对加密数据ED进行解密得到DD（Decrypt(ED)）；6.计算节点Comp在Enclave中执行合约计算，输出结果result、合约状态newstate和证明attestation；7.计算节点Comp构造交易TX{event,newstate,attestation}，attestation中包含计算结果的哈希值Hash(result)，广播给共识网络Cons；8.共识网络Cons验证交易、打包、更新状态，形成全网共识；9.计算节点Comp向客户端P发送receipt。


TCP有效的将区块链和TEE结合起来，基于区块链的分布式共识和以及TEE的隐私计算能力，为万亿级别的可信计算市场设计了一个强大的通用平台。作为一个新型的安全计算和隐私保护领域的编程模型，解决了现有区块链所面临的性能瓶颈和隐私保护缺失。我们展示了TCP的设计细节，可以用于实现各种安全的分布式可信计算应用程序，这些应用程序可以为大数据时代提供更加经济安全的选择。
我们相信，区块链作为“信任机器”必然会应用到人类协作网络里的各个环节。而可信计算协议，或许就是区块链技术和庞大的数据经济之间的“破壁者”，不但能推进区块链技术的大规模落地，也将解决“数据隐私权”和“数据商业效率”持续多年的争议，在保护隐私的情况下，释放出数据经济真正应有的活力。
在未来的工作中，我们将在以下几个方面展开。首先是深入研究SGX的底层原理，在源码级别、系统级别上研究应对侧信道攻击的策略；其次是设计可信应用程序的开发标准，和前者结合起来，达到更高级别的隐私保护；第三，支持多种机器学习的标准库，并设计实用的GPU等硬件加速方案；第四，深入研究零知识证明，打造通用型的可验证计算；第五，增强可扩展性，支持复杂耗时运算的分布式并行处理；第六，支持隐私交易，比如实现mimblewimble协议；第七，优化加密经济设计，将其价值与所服务的公链更好的锚定起来。
TCP的设计经历了多次迭代和演变，每次都是基于GXChain开发者和社区的工作，我们要感谢所有人在设计过程中所做的出色贡献。感谢VitalikButerin在Plasma实现上的非凡建议和以太坊社区、Cosmos开发人员及其社区的工作，感谢Intel的提供的SGX技术支持，感谢Dfinity在随机性和架构设计上的独特见解。
让我们共同携手创建美好未来！












